{
  "extends": [
    "eslint:all",
    "plugin:@typescript-eslint/all",
    "plugin:import/recommended",
    "plugin:import/typescript",
    "plugin:unicorn/recommended",
    "airbnb-base",
    "airbnb-typescript/base",
    "prettier"
  ],
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint", "import", "prettier", "unicorn"],
  "env": {
    "browser": true,
    "node": true,
    "es2021": true
  },
  "settings": {
    "import/resolver": {
      "typescript": {}
    }
  },
  "rules": {
    "no-dupe-else-if": "error",
    "no-promise-executor-return": "error",
    "no-unreachable-loop": "error",
    "no-useless-backreference": "error",
    "require-atomic-updates": "error",
    "default-case-last": "error",
    "grouped-accessor-pairs": "error",
    "no-constructor-return": "error",
    "no-implicit-coercion": "error",
    "prefer-regex-literals": "error",
    "capitalized-comments": "error",
    "no-restricted-syntax": [
      "error",
      {
        "selector": "ForInStatement",
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
      },
      {
        "selector": "LabeledStatement",
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
      },
      {
        "selector": "WithStatement",
        "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
      }
    ],
    "@typescript-eslint/no-magic-numbers": ["off"],
    "@typescript-eslint/no-confusing-void-expression": [
      "error",
      {
        "ignoreArrowShorthand": true
      }
    ],
    "import/no-deprecated": "error",
    "import/no-extraneous-dependencies": [
      "error",
      {
        "devDependencies": [
          "vite.config.ts",
          "src/setupTests.ts",
          "src/testUtils.tsx",
          "src/mocks/**",
          "src/components/**/*.stories.{ts,tsx}",
          "src/components/**/*.cy.{ts,tsx}",
          "**/__tests__/*.{ts,tsx}"
        ]
      }
    ],
    "unicorn/filename-case": [
      "error",
      {
        "cases": {
          "camelCase": true,
          "pascalCase": true
        }
      }
    ],
    "unicorn/no-nested-ternary": ["error"],
    "arrow-body-style": ["error", "always"],
    "no-dupe-keys": "error",
    "valid-jsdoc": ["error"],
    "eol-last": ["error", "always"],
    "padding-line-between-statements": [
      "error",
      {
        "blankLine": "always",
        "prev": "directive",
        "next": "*"
      },
      {
        "blankLine": "any",
        "prev": "directive",
        "next": "directive"
      },
      {
        "blankLine": "always",
        "prev": "import",
        "next": "*"
      },
      {
        "blankLine": "any",
        "prev": "import",
        "next": "import"
      },
      {
        "blankLine": "always",
        "prev": "*",
        "next": ["const", "let", "var", "export"]
      },
      {
        "blankLine": "always",
        "prev": ["const", "let", "var", "export"],
        "next": "*"
      },
      {
        "blankLine": "any",
        "prev": ["const", "let", "var", "export"],
        "next": ["const", "let", "var", "export"]
      },
      {
        "blankLine": "always",
        "prev": "*",
        "next": ["if", "class", "for", "do", "while", "switch", "try"]
      },
      {
        "blankLine": "always",
        "prev": ["if", "class", "for", "do", "while", "switch", "try"],
        "next": "*"
      },
      {
        "blankLine": "always",
        "prev": "*",
        "next": "return"
      }
    ],
    "prettier/prettier": "error",
    "no-plusplus": [
      "error",
      {
        "allowForLoopAfterthoughts": true
      }
    ],
    "@typescript-eslint/no-use-before-define": ["error"],
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/no-type-alias": "off",
    "@typescript-eslint/prefer-readonly-parameter-types": "off",
    "import/no-absolute-path": "off",
    "unicorn/no-null": "off",
    "@typescript-eslint/explicit-member-accessibility": "off",
    "@typescript-eslint/member-ordering": "off",
    "unicorn/no-useless-undefined": "off",
    "no-undef-init": "off",
    "class-methods-use-this": "off",
    "@typescript-eslint/class-methods-use-this": "off",
    "unicorn/prevent-abbreviations": [
      "error",
      {
        "allowList": {
          "e2e": true
        }
      }
    ],
    "@typescript-eslint/consistent-type-definitions": ["error", "type"],
    "no-restricted-exports": [
      "error",
      {
        "restrictDefaultExports": {
          "defaultFrom": true,
          "namedFrom": true
        }
      }
    ]
  }
}
